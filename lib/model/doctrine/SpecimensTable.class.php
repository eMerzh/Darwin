<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SpecimensTable extends DarwinTable
{
  static public $acquisition_category = array(
      'undefined' => 'Undefined',
      'donation' => 'Donation',
      'exchange' => 'Exchange',
      'internal work' => 'Internal work',
      'loan' => 'Loan',
      'mission' => 'Mission',
      'purchase' => 'Purchase',
      'seizure' => 'Judicial seizure',
      'trip' => 'Trip',
      'excavation' => 'Excavation',
      'exploration' => 'Exploration',
      'collect' => 'Collect',
      );

  protected static $widget_array = array(
    'collection_ref' => 'refCollection' ,
    'category' => 'refCollection' ,      
    'gtu_ref' => 'refGtu' ,
    'station_visible' => 'refGtu' ,
    'taxon_ref' => 'refTaxon' ,
    'host_taxon_ref' => 'refHosts' ,            
    'host_specimen_ref' => 'refHosts' ,
    'host_relationship' => 'refHost' ,
    'litho_ref' => 'refLitho' ,
    'chrono_ref' => 'refChrono' ,
    'lithology_ref' => 'refLithology' ,
    'mineral_ref' => 'refMineral' ,
    'ig_ref' => 'refIgs' ,
    'expedition_ref' => 'refExpedition' ,
    'acquisition_category' => 'acquisitionCategory' ,
    'acquisition_date_mask' => 'acquisitionCategory' ,
    'acquisition_date' => 'acquisitionCategory' ,   
    'collecting_method' => 'tool' ,
    'collecting_tool' => 'tool' ,
  );


  public function findDuplicate($object)
  {
    $q = Doctrine_Query::create()
      ->from('Specimens s')
      ->where('s.collection_ref = ?', $object->getCollectionRef())
      ->andwhere('s.expedition_ref = ?', $object->getExpeditionRef())
      ->andwhere('s.gtu_ref = ?', $object->getGtuRef())
      ->andwhere('s.taxon_ref = ?', $object->getTaxonRef())
      ->andwhere('s.litho_ref = ?', $object->getLithoRef())
      ->andwhere('s.chrono_ref = ?', $object->getChronoRef())
      ->andwhere('s.lithology_ref = ?', $object->getLithologyRef())
      ->andwhere('s.mineral_ref = ?', $object->getMineralRef())
      ->andwhere('s.host_taxon_ref = ?', $object->getHostTaxonRef())
      ->andwhere('COALESCE(s.ig_ref,0) is not distinct from COALESCE(?,0)', $object->getIgRef())
      ->andwhere('s.acquisition_category = ?', $object->getAcquisitionCategory())
      ->andwhere('s.acquisition_date = ?', $object->getRawAcquisitionDate());
    return $q->fetchOne(); 
  }

  /**
  * Get differents acquisition categories
  * @return array of key/value of acquisition categories
  */
  public static function getDistinctCategories()
  {
      try{
          $i18n_object = sfContext::getInstance()->getI18n();
      }
      catch( Exception $e )
      {
          return self::$acquisition_category;
      }
      return array_map(array($i18n_object, '__'), self::$acquisition_category);
  }

  /**
  * Get distinct Host Relationships
  * @return Doctrine_collection with distinct "host_relationship" as column
  */
  public function getDistinctHostRelationships()
  {
      return $this->createFlatDistinct('specimens', 'host_relationship', 'host_relationship')->execute();
  }

  public function getSpecimenByRef($collection_id,$taxon_id)
  {
          $q = Doctrine_Query::create()
              ->from('specimens s')
              ->where('s.collection_ref = ?', $collection_id)
              ->andWhere('s.taxon_ref = ?', $taxon_id);

          return $q->fetchOne(); 
  }

  /**
  * Set required widget visible and opened 
  */   
  public function getRequiredWidget($criterias, $user, $category, $all = 0)
  {
    if (!$all)
    {
      $req_widget = array() ;
      $default_values = array(0,"Undefined","undefined","not applicable","0001/01/01");
      foreach($criterias as $key => $fields)
      {
        if ($key == "rec_per_page") continue ;
        if (!$fields) continue ;

        if(isset(self::$widget_array[$key]) && !in_array($fields,$default_values)) 
          $req_widget[self::$widget_array[$key]] = 1 ;
      }
      Doctrine::getTable('MyWidgets')->forceWidgetOpened($user, $category ,array_keys($req_widget));
    }
    else
      Doctrine::getTable('MyWidgets')->forceWidgetOpened($user, $category ,1);
  }

  public function fetchOneWithRights($id, $user)
  {
    $q = Doctrine_Query::create()
      ->select('s.*, collection_ref in (select fct_search_authorized_encoding_collections('.$user->getId().')) as has_encoding_rights')
      ->from('specimens s')
      ->where('id = ?',$id);
    if (!$user->isA(Users::ADMIN)){
      $q->andWhere('collection_ref in (select fct_search_authorized_view_collections('.$user->getId().'))');
    }
    return $q->fetchOne();
  }
}
