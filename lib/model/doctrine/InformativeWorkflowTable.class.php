<?php

/**
 * InformativeWorkflowTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class InformativeWorkflowTable extends DarwinTable
{
  /**
   * Returns an instance of this class.
   *
   * @return object InformativeWorkflowTable
   */
  public static function getInstance()
  {
      return Doctrine_Core::getTable('InformativeWorkflow');
  }
  
  /**
  * Find all associated workflow (joined with values)
  * for a given table and record id
  * @param string $table_name db table name
  * @param int $record_id id of the record
  * @return a Doctrine_collection of results
  */
  public function prepareQuery($table_name, $record_id)
  {
     $q = Doctrine_Query::create()
	 ->from('InformativeWorkflow iw')
	 ->orderBy('iw.modification_date_time DESC');
     $q = $this->addCatalogueReferences($q, $table_name, $record_id, 'iw', true);
     return $q;
  }    
  
  public function findForTable($table_name, $record_id)
  {
    $q = self::prepareQuery($table_name, $record_id);
    $q->limit(5) ;
    return $q->execute() ;
  }

  public function findAllForTable($table_name, $record_id)
  {
    $q = self::prepareQuery($table_name, $record_id);    
    return $q->execute() ;
  }  
  
  public function getAllLatestWorkflow($user,$status)
  {
    $q = Doctrine_Query::create()
      ->from('InformativeWorkflow i')
      ->where('is_last=?',true) ;
    if($status != 'all') $q->addWhere('status=?',$status) ;      
    if($user->isA(Users::ADMIN))
    {      
	    $q->AndWhereIn('referenced_relation',array('specimens','specimen_individuals','specimen_parts'))   ;
	    return $q ;	 
    }	
    $q->AddWhere("EXISTS(Select distinct collection_ref from darwin_flat where case
          when i.referenced_relation = 'specimens' then spec_ref = i.record_id
          when i.referenced_relation = 'specimen_individuals' then individual_ref = i.record_id
          when i.referenced_relation = 'specimen_parts' then part_ref = i.record_id END
          AND collection_ref IN (select fct_search_authorized_encoding_collections(".$user->getId().")))");
    
    return $q ; 
  }
}
