<?php

/**
 * BaseCatalogueProperties
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $referenced_relation
 * @property integer $record_id
 * @property string $property_type
 * @property string $property_sub_type
 * @property string $property_sub_type_indexed
 * @property string $property_qualifier
 * @property string $property_qualifier_indexed
 * @property integer $date_from_mask
 * @property string $date_from
 * @property integer $date_to_mask
 * @property string $date_to
 * @property string $property_unit
 * @property string $property_accuracy_unit
 * @property string $property_method
 * @property string $property_method_indexed
 * @property string $property_tool
 * @property string $property_tool_indexed
 * @property Doctrine_Collection $PropertiesValues
 * 
 * @method integer             getId()                         Returns the current record's "id" value
 * @method string              getReferencedRelation()         Returns the current record's "referenced_relation" value
 * @method integer             getRecordId()                   Returns the current record's "record_id" value
 * @method string              getPropertyType()               Returns the current record's "property_type" value
 * @method string              getPropertySubType()            Returns the current record's "property_sub_type" value
 * @method string              getPropertySubTypeIndexed()     Returns the current record's "property_sub_type_indexed" value
 * @method string              getPropertyQualifier()          Returns the current record's "property_qualifier" value
 * @method string              getPropertyQualifierIndexed()   Returns the current record's "property_qualifier_indexed" value
 * @method integer             getDateFromMask()               Returns the current record's "date_from_mask" value
 * @method string              getDateFrom()                   Returns the current record's "date_from" value
 * @method integer             getDateToMask()                 Returns the current record's "date_to_mask" value
 * @method string              getDateTo()                     Returns the current record's "date_to" value
 * @method string              getPropertyUnit()               Returns the current record's "property_unit" value
 * @method string              getPropertyAccuracyUnit()       Returns the current record's "property_accuracy_unit" value
 * @method string              getPropertyMethod()             Returns the current record's "property_method" value
 * @method string              getPropertyMethodIndexed()      Returns the current record's "property_method_indexed" value
 * @method string              getPropertyTool()               Returns the current record's "property_tool" value
 * @method string              getPropertyToolIndexed()        Returns the current record's "property_tool_indexed" value
 * @method Doctrine_Collection getPropertiesValues()           Returns the current record's "PropertiesValues" collection
 * @method CatalogueProperties setId()                         Sets the current record's "id" value
 * @method CatalogueProperties setReferencedRelation()         Sets the current record's "referenced_relation" value
 * @method CatalogueProperties setRecordId()                   Sets the current record's "record_id" value
 * @method CatalogueProperties setPropertyType()               Sets the current record's "property_type" value
 * @method CatalogueProperties setPropertySubType()            Sets the current record's "property_sub_type" value
 * @method CatalogueProperties setPropertySubTypeIndexed()     Sets the current record's "property_sub_type_indexed" value
 * @method CatalogueProperties setPropertyQualifier()          Sets the current record's "property_qualifier" value
 * @method CatalogueProperties setPropertyQualifierIndexed()   Sets the current record's "property_qualifier_indexed" value
 * @method CatalogueProperties setDateFromMask()               Sets the current record's "date_from_mask" value
 * @method CatalogueProperties setDateFrom()                   Sets the current record's "date_from" value
 * @method CatalogueProperties setDateToMask()                 Sets the current record's "date_to_mask" value
 * @method CatalogueProperties setDateTo()                     Sets the current record's "date_to" value
 * @method CatalogueProperties setPropertyUnit()               Sets the current record's "property_unit" value
 * @method CatalogueProperties setPropertyAccuracyUnit()       Sets the current record's "property_accuracy_unit" value
 * @method CatalogueProperties setPropertyMethod()             Sets the current record's "property_method" value
 * @method CatalogueProperties setPropertyMethodIndexed()      Sets the current record's "property_method_indexed" value
 * @method CatalogueProperties setPropertyTool()               Sets the current record's "property_tool" value
 * @method CatalogueProperties setPropertyToolIndexed()        Sets the current record's "property_tool_indexed" value
 * @method CatalogueProperties setPropertiesValues()           Sets the current record's "PropertiesValues" collection
 * 
 * @package    darwin
 * @subpackage model
 * @author     DB team <darwin-ict@naturalsciences.be>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCatalogueProperties extends DarwinModel
{
    public function setTableDefinition()
    {
        $this->setTableName('catalogue_properties');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('referenced_relation', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('record_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('property_type', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('property_sub_type', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('property_sub_type_indexed', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('property_qualifier', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('property_qualifier_indexed', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('date_from_mask', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('date_from', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '0001-01-01',
             ));
        $this->hasColumn('date_to_mask', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('date_to', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '2038-12-31',
             ));
        $this->hasColumn('property_unit', 'string', null, array(
             'type' => 'string',
             'default' => '',
             ));
        $this->hasColumn('property_accuracy_unit', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('property_method', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('property_method_indexed', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('property_tool', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('property_tool_indexed', 'string', null, array(
             'type' => 'string',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('PropertiesValues', array(
             'local' => 'id',
             'foreign' => 'property_ref'));
    }
}