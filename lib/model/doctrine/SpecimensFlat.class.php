<?php

/**
 * SpecimensFlat
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    darwin
 * @subpackage model
 * @author     DB team <collections@naturalsciences.be>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class SpecimensFlat extends BaseSpecimensFlat
{

  public function getAcquisitionDateMasked ()
  {
    $dateTime = new FuzzyDateTime($this->_get('acquisition_date'), $this->_get('acquisition_date_mask'));
    return $dateTime->getDateMasked();
  }
  
  public function getAcquisitionDate()
  {
    $from_date = new FuzzyDateTime($this->_get('acquisition_date'), $this->_get('acquisition_date_mask'));
    return $from_date->getDateTimeMaskedAsArray();
  }

  public function getRawAcquisitionDate()
  {
    return $this->_get('acquisition_date');
  }

  public function getName()
  {
    $name = '-';
    if(! $this->isNew() && $this->_get('id')==0)
      return $name;
    $codes = Doctrine::getTable('Codes')->getCodesRelated('specimens', $this->_get('id'));
    if (!$codes->count())
      return $name;
    $name = '';
    foreach ($codes as $code)
    {
      $name .= '['.$code->getCodeFormated().'] ';
    }
    $name = rtrim($name);
    return $name;
  }

  public function getNbrIndiv()
  {
    if($this->isNew()) return 0;
    $q = Doctrine_Query::create()
                  ->select('count(id)')
                  ->from('SpecimenIndividuals i')
                  ->Where('i.specimen_ref = ?',$this->getId());
        return $q->execute(array(), Doctrine::HYDRATE_SINGLE_SCALAR);
  }

  public function getNbrPart()
  {
    if($this->isNew()) return 0;
    $q = Doctrine_Query::create()
                  ->select('count(p.id)')
                  ->from('SpecimenParts p')
                  ->innerJoin('p.Individual i')
                  ->Where('i.specimen_ref = ?',$this->getId());
        return $q->execute(array(), Doctrine::HYDRATE_SINGLE_SCALAR);
  }

  public function getAggregatedName($sep = ' / ')
  {
    $items = array(
        $this->getCollectionName(),
        $this->getTaxonName(),
        $this->getChronoName(),
        $this->getLithoName(),
        $this->getLithologyName(),
        $this->getMineralName()
   );

    $items = array_filter($items);
    return implode($sep, $items);
  } 


  public function getCountryTags($is_view = false)
  {
    $tags = explode(';',$this->getGtuCountryTagValue(''));
    $nbr = count($tags);
    if(! $nbr) return "-";
    $str = '<ul class="name_tags_view">';
    foreach($tags as $value)
      if (strlen($value))
        $str .= '<li>' . trim($value).'</li>';
    $str .= '</ul>';
    
    return $str;
  }

  public function getOtherGtuTags()
  {
    $tags = explode(';',$this->getGtuCountryTagValue(''));
    $nbr = count($tags);
    if(! $nbr) return "-";
    $str = '<ul class="name_tags_view">';
    foreach($tags as $value)
      if (strlen($value))
        $str .= '<li>' . trim($value).'</li>';
    $str .= '</ul>';
    
    return $str;
  }
}
